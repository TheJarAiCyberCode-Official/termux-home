#!/bin/bash

# backup-termux-encrypted
# Skrip Bash untuk mencadangkan data Termux dan dienkripsi menggunakan openssl

clear

# --- VARIABEL UTAMA PENTING ---
BACKUP_DIR="/sdcard/termux"
TIMESTAMP=$(date +%Y-%m-%d_%H%M%S)
BACKUP_FILENAME="termux-backup-${TIMESTAMP}.tar.gz"
BACKUP_FILE="$BACKUP_DIR/$BACKUP_FILENAME"
RESERVED_DIRECTORY="/data/data/com.termux/files"

# --- FUNGSI CEK DAN INSTALL DEPENDENSI ---
check_and_install_deps() {
    if ! command -v openssl &> /dev/null || ! command -v tar &> /dev/null; then
        echo "Memasang paket yang dibutuhkan: openssl-tool dan tar..."
        pkg update -y
        pkg install openssl-tool tar -y
        if [ $? -ne 0 ]; then
            echo -e "\e[1;31m❌ Gagal menginstal paket. Cek koneksi internet.\e[0m"
            exit 1
        fi
    fi
}

# --- PENGECEKAN IZIN PENYIMPANAN TERMUX (KRITIS) ---
CHECK_STORAGE=$(ls /sdcard 2>&1 | grep "Permission denied" | awk -F': ' '{print $NF}')
if [ "$CHECK_STORAGE" == "Permission denied" ]; then
    echo -e "\e[1;33m⚠️ Peringatan: Izin penyimpanan belum diatur.\e[0m"
    echo -e "Jalankan \e[1;34mtermux-setup-storage\e[0m terlebih dahulu dan ulangi skrip ini."
    exit 1
fi

# --- PENGECEKAN & PEMBUATAN DIREKTORI BACKUP ---
if [ ! -d "$BACKUP_DIR" ]; then
    echo "Direktori $BACKUP_DIR tidak ditemukan. Membuat direktori..."
    mkdir -p "$BACKUP_DIR"
    if [ $? -ne 0 ]; then
        echo -e "\e[1;31m❌ Gagal membuat direktori $BACKUP_DIR. Cek izin.\e[0m"
        exit 1
    fi
fi

# Pengecekan dan Install Dependensi
check_and_install_deps

# --- PROSES PENCADANGAN ---
echo "Memulai mencadangkan Termux..."
echo -e "\e[1mSumber:\e[0m $RESERVED_DIRECTORY/ './usr' './home'"
echo -e "\e[1mTujuan:\e[0m $BACKUP_DIR"
echo "tunggu sebentar yaa... :) "

tar -czPf "$BACKUP_FILE" -C "$RESERVED_DIRECTORY" \
    --exclude='./home/.gnupg/S.gpg-agent' \
    --exclude='./home/.gnupg/S.gpg-agent.browser' \
    --exclude='./home/.gnupg/S.gpg-agent.extra' \
    --exclude='./home/.gnupg/S.gpg-agent.ssh' \
    --exclude='./home/.gnupg/S.scdaemon' \
    --exclude='./home/.gnupg/S.keyboxd' \
    --exclude='./home/.ssh/agent' \
    --exclude='./home/.cache' \
    --exclude='./home/.bash_history' \
    --exclude='./home/.python_history' \
    --exclude='./home/.lessht' \
    --exclude='./home/.wget-hsts' \
    ./usr ./home

if [ $? -eq 0 ]; then
    echo -e "\n✅ Pencadangan Termux berhasil dibuat: \e[1;32m$BACKUP_FILENAME\e[0m"

    # --- PROSES ENKRIPSI DENGAN PENGULANGAN ---
    echo -e "\n\e[1;36m🔔 Perhatian: Masukkan PASSWORD ENKRIPSI yang KUAT.\e[0m"
    echo "Password ini akan diminta lagi saat dekripsi. Jika gagal, akan diulang."

    ENCRYPTED_FILE="${BACKUP_FILE}.enc"
    ENCRYPTION_ATTEMPTS=0
    MAX_ATTEMPTS=3 # Batas percobaan, opsional

    # Loop ini akan terus berjalan SELAMA openssl GAGAL (kode keluar BUKAN 0)
    while ! openssl enc -e -aes-256-cbc -pbkdf2 -in "$BACKUP_FILE" -out "$ENCRYPTED_FILE"; do
        ENCRYPTION_ATTEMPTS=$((ENCRYPTION_ATTEMPTS + 1))
        echo -e "\n\e[1;31mEnkripsi GAGAL (Percobaan ke-$ENCRYPTION_ATTEMPTS)!\e[0m"
        echo "Mungkin password yang dimasukkan saat verifikasi berbeda."

        # Batasi percobaan (opsional)
        if [ $ENCRYPTION_ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo -e "\e[1;31mGagal enkripsi setelah $MAX_ATTEMPTS kali percobaan. Menghentikan skrip.\e[0m"
            echo -e "File backup TIDAK terenkripsi masih ada: \e[1;33m$BACKUP_FILE\e[0m"
            exit 1
        fi

        echo -e "\e[1;33mMengulang perintah enkripsi...\e[0m"
        # Menghapus file .enc yang mungkin sebagian dibuat jika gagal agar bersih
        rm -f "$ENCRYPTED_FILE"

    done
    # --- AKHIR PROSES ENKRIPSI DENGAN PENGULANGAN ---

    # Jika loop while berhasil keluar, artinya enkripsi sukses
    echo -e "\n✅ Enkripsi BERHASIL setelah $ENCRYPTION_ATTEMPTS kali percobaan! File terenkripsi: \n\e[1;32m$ENCRYPTED_FILE 🔐\e[0m"

    # Membuat file sha256sum untuk file terenkripsi (.enc)
    SHA256_FILE="${ENCRYPTED_FILE}.sha256"
    sha256sum "$ENCRYPTED_FILE" > "$SHA256_FILE"
    echo -e "Membuat file SHA256 untuk verifikasi: \n\e[1;32m$SHA256_FILE\e[0m"

    # --- OPSI PENGHAPUSAN FILE ASLI SECARA AMAN ---
    read -r -p "Apakah Anda ingin menghapus file backup asli TIDAK terenkripsi? (y/n): " DELETE_ANSWER
    DELETE_ANSWER_LOWER=$(echo "$DELETE_ANSWER" | tr '[:upper:]' '[:lower:]')

    if [ "$DELETE_ANSWER_LOWER" == "y" ]; then
        echo "menghapus file backup asli..."
        echo -e "\e[1;35mshred -zuf\e[0m $BACKUP_FILE (Secure Deletion)..."
        # shred (Secure Deletion)
        # untuk menimpa (overwrite) data file berulang kali (standarnya 3 kali)
        # dengan pola acak sebelum akhirnya menghapus file tersebut.
        # Ini membuat data sangat sulit atau mungkin mustahil untuk dipulihkan.
        shred -zuf "$BACKUP_FILE"
        echo -e "File backup asli \e[1;32m$BACKUP_FILENAME\e[0m telah dihapus secara aman."
    else
      echo -e "\e[1;33mPeringatan: File backup asli ($BACKUP_FILENAME)\e[0m"
      echo -e "\e[1;33mMasih ada dan TIDAK terenkripsi. Amankan atau hapus secara manual.\e[0m"
    fi


else
    echo -e "\e[1;31mPencadangan gagal!\e[0m Cek kembali izin Termux atau,"
    echo -e "pastikan direktori sumber $RESERVED_DIRECTORY \e[1;33m'./usr' './home'\e[0m"
    echo "benar-benar ada dan dapat diakses."
fi

echo -e "\nProses Backup dan Enkripsi selesai!"

# Note: Pada saat mendekripsi dan memulihkan data backup, gunakan perintah berikut ini:
# openssl enc -d -aes-256-cbc -pbkdf2 -in </sdcard/termux/nama-file-backup.tar.gz.enc> -out </sdcard/termux/nama-file-backup.tar.gz>
# tar -xzvf </sdcard/termux/nama-file-backup.tar.gz> -C /data/data/com.termux/files/ ./usr ./home --recursive-unlink --preserve-permissions

# setelah itu tutup Termux dengan tombol "keluar" dari notifikasi dan buka lagi sesi baru.
